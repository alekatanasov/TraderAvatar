/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package indicators;


// imports:
import error.*;
import financialdata.*;
import marketanalysis.*;


/**
 * Abstract tool used for technical analysis of the market conditions. 
 * Serves as root class for all other indicator classes. The subclasses of this class represent actual
 * technical indicators, their purpose is to provide different perspective of the market condition.
 *
 * @author Alexandar Atanasov
 */
public abstract class Indicator {
    // declare member variables:

    /** Instance of the ErrorHandler used for managing errors. */
    private static ErrorHandler eHandler;

    /** Reference to instance of the MarketRawData class. */
    private MarketRawData rawData;

    /** Reference to instance of the MarketInterval class. */
    private MarketIntervalData intervalData;;

    // end of member variables declaration


    // initialization of static members:
    static {
        eHandler = new ErrorHandler("Indicator");
    } // end of static members initialization


    /**
     * Constructor.
     */
    public Indicator() {
        //
    } // end of constructor


    /** 
     * Sets the rawData member.
     * 
     * @param marketRawData Reference to instance of the MarketRawData class. Providing null to this argument
     *                      will generate error.
     */
    private void setRawData(MarketRawData marketRawData) {
        // check for null pointer
        if(marketRawData == null) {
            // error ..
            eHandler.newError(ErrorType.NULL_ARGUMENT, "setRawData");

            // exit from method
            return;
        } // end of if statement

        // set the rawData
        rawData = new MarketRawData(marketRawData);

    } // end of method setRawData()


    /**
     * Sets the intervalData member.
     *
     * @param marketIntervalData Reference to instance of the IntervalData class. Providing null to this
     *                           argument will generate error.
     */
    private void setIntervalData(MarketIntervalData marketIntervalData) {
        // check for null pointer
        if(marketIntervalData == null) {
            // error ..
            eHandler.newError(ErrorType.NULL_ARGUMENT , "setIntervalData");

            // exit from method
            return;
        } // end of if statement

        // set the intervalData
        intervalData = new MarketIntervalData(marketIntervalData);

    } // end of method setIntervalData()


    /**
     * Returns the errorHandler member.
     *
     * @return Non null reference to the instance of the ErrorHandler contained by this class.
     */
    public static ErrorHandler getErrorHandler() {
        return eHandler;
    } // end of method


    /**
     * Returns the rawData member.
     *
     * @return Reference to the instance of the MarketRawData contained by this class.
     */
    public MarketRawData getRawData() {
        return rawData;
    } // end of method

    
    /**
     * Returns the intervalData member.
     *
     * @return Reference to the instance of the MarketIntervalData contained by this class.
     */
    public MarketIntervalData getIntervalData() {
        return intervalData;
    } // end of method


    /**
     * Updates the class members and calls the indicatorMain() method to generate indicator data.
     * 
     * @param rawData Instance of the MarketRawData class containing up to date information about the current
     *                market conditions. Providing null to this argument will generate error.
     * @param marketIntervalData Instance of the MarketIntervalData class containing up to date formated data
     *                           about the current market conditions.Providing null to this argument will 
     *                           generate error.
     * 
     * @return Non null instance of the IndicatorResult class containing the data generated by this indicator.
     */
    public IndicatorResult generateIndicatorData(MarketRawData marketRawData , MarketIntervalData marketIntervalData) {

        // set the members
        setRawData(marketRawData);
        setIntervalData(marketIntervalData);

        // call the indicator main method
        return indicatorMain();

    } // end of method indicatorMain()


    /**
     * Core indicator method used for generating indicator data.
     *
     * @return Non null instance of the IndicatorResult class containing the data generated by this indicator.
     */
    protected abstract IndicatorResult indicatorMain();

} // end of class Indicator
